# -*- coding: utf-8 -*-
# Generated by Django 1.11 on 2018-08-26 13:49
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('name', models.CharField(blank=True, help_text='名字', max_length=255, null=True, verbose_name='名字')),
                ('types', models.IntegerField(choices=[(0, '超级管理员'), (1, '管理员'), (2, '导师'), (3, '学员'), (4, '游客')], default=4, verbose_name='用户类型')),
                ('age', models.IntegerField(blank=True, help_text='年龄', null=True, verbose_name='年龄')),
                ('gender', models.CharField(choices=[('男', '男'), ('女', '女')], default='男', help_text='性别', max_length=255, verbose_name='性别')),
                ('address', models.CharField(blank=True, help_text='地址', max_length=255, null=True, verbose_name='地址')),
                ('mobile', models.CharField(blank=True, help_text='手机号码', max_length=255, null=True, verbose_name='手机号码')),
                ('email', models.EmailField(blank=True, help_text='邮箱地址', max_length=254, null=True, verbose_name='邮箱地址')),
                ('expected_work', models.CharField(blank=True, help_text='期望工作', max_length=255, null=True, verbose_name='期望工作')),
                ('assessment', models.TextField(blank=True, help_text='自我评价', null=True, verbose_name='自我评价')),
                ('img', models.ImageField(default='users/image/default.jpg', help_text='头像', max_length=255, upload_to='users/image/%Y/%m', verbose_name='头像')),
                ('score', models.IntegerField(blank=True, default=0, null=True, verbose_name='排序积分')),
                ('want_be_challenged', models.BooleanField(default=False, verbose_name='是否希望被挑战')),
            ],
            options={
                'verbose_name': '学生信息',
                'verbose_name_plural': '学生信息',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='CityInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='城市名称')),
            ],
            options={
                'verbose_name': '城市信息表',
                'verbose_name_plural': '城市信息表',
            },
        ),
        migrations.CreateModel(
            name='ClassInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='班级名称')),
                ('notice', models.CharField(max_length=500, verbose_name='班级公告')),
            ],
            options={
                'verbose_name': '班级信息表',
                'verbose_name_plural': '班级信息表',
            },
        ),
        migrations.CreateModel(
            name='Teacher',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='名字', max_length=255, verbose_name='名字')),
                ('types', models.IntegerField(choices=[(1, '导师'), (2, '讲师'), (3, '班主任')], default=0, verbose_name='老师类型')),
                ('intr', models.CharField(max_length=800, verbose_name='老师介绍')),
                ('img', models.ImageField(default=None, help_text='头像', max_length=255, upload_to='users/image/%Y/%m', verbose_name='头像')),
            ],
            options={
                'verbose_name': '老师信息表',
                'verbose_name_plural': '老师信息表',
            },
        ),
        migrations.CreateModel(
            name='UserProject',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('project_name', models.CharField(max_length=255, verbose_name='项目名')),
                ('technology', models.TextField(verbose_name='使用技术')),
                ('project_function', models.TextField(verbose_name='项目功能')),
                ('create', models.TextField(verbose_name='个人负责板块')),
                ('time_slot', models.CharField(max_length=255, verbose_name='项目时间段')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='用户名')),
            ],
            options={
                'verbose_name': '项目经验',
                'verbose_name_plural': '项目经验',
            },
        ),
        migrations.CreateModel(
            name='UserResume',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Study_time', models.DateTimeField(help_text='入学时间', verbose_name='入学时间')),
                ('end_time', models.DateTimeField(help_text='毕业时间', verbose_name='毕业时间')),
                ('school_name', models.CharField(help_text='学校名称', max_length=255, verbose_name='学校名称')),
                ('major', models.CharField(help_text='所学专业', max_length=255, verbose_name='所学专业')),
                ('education', models.CharField(help_text='学历', max_length=255, verbose_name='学历')),
                ('honor', models.CharField(help_text='获得荣誉', max_length=255, verbose_name='获得荣誉')),
                ('user', models.ForeignKey(help_text='用户名', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='用户名')),
            ],
            options={
                'verbose_name': '教育背景',
                'verbose_name_plural': '教育背景',
            },
        ),
        migrations.CreateModel(
            name='UserSkill',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('skill_name', models.CharField(max_length=255, verbose_name='技能名')),
                ('skill_level', models.CharField(choices=[('know', '了解'), ('shuxi', '熟悉'), ('skilled', '熟练'), ('master', '精通')], default='shuxi', max_length=255, verbose_name='技能等级')),
                ('skill_introduce', models.CharField(max_length=255, verbose_name='技能介绍')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='用户名')),
            ],
            options={
                'verbose_name': '掌握技能',
                'verbose_name_plural': '掌握技能',
            },
        ),
        migrations.AddField(
            model_name='classinfo',
            name='teacher_head',
            field=models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='head', to='users.Teacher', verbose_name='班主任'),
        ),
        migrations.AddField(
            model_name='classinfo',
            name='teacher_lector',
            field=models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='lector', to='users.Teacher', verbose_name='讲师'),
        ),
        migrations.AddField(
            model_name='classinfo',
            name='teacher_tutor',
            field=models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='tutor', to='users.Teacher', verbose_name='导师'),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='city',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='users.CityInfo', verbose_name='所在城市'),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='in_class',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='users.ClassInfo', verbose_name='所属班级'),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AlterUniqueTogether(
            name='userprofile',
            unique_together=set([('username',)]),
        ),
    ]
